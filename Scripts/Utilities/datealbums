#!/usr/bin/env ruby
require 'trollop'
require 'discogs'
require 'fuzzystringmatch'

class String
	def color(c)
		colors = { 
			:black   => 30, 
			:red     => 31, 
			:green   => 32, 
			:yellow  => 33, 
			:blue    => 34, 
			:magenta => 35, 
			:cyan    => 36, 
			:white   => 37 
		}
		return "\e[#{colors[c] || c}m#{self}\e[0m"
	end
end


def clear
  system "clear"
end

discogs = Discogs::Wrapper.new()
matcher = FuzzyStringMatch::JaroWinkler.create(:native)


opts = Trollop::options do
  opt :artist, "Artist Name in Discogs", :type => :string
end
artist_name = opts[:artist] ? opts[:artist] : File.basename(Dir.getwd)

art = discogs.get_artist(artist_name)
discogs_releases = art.releases

rename_folders = ARGV
clear
rename_folders.each do |folder_name|
  match_name = folder_name.gsub(artist_name, "") if match_name != folder_name

  closest_match    = nil
  closest_distance = 0
  discogs_releases.each do |release|
    distance = matcher.getDistance(release.title, match_name)

    if (distance > closest_distance)
      next if !release
      closest_distance = distance
      closest_match    = release
    end
  end

  new_name = "#{closest_match.year} - #{closest_match.title}"
  puts "#{folder_name.color(:red)} ==> #{new_name.color(:green)}  (#{closest_distance.to_s.color(:blue)})"

  puts "#{'(Y)es change'.color(:magenta)} #{'(N)o change'.color(:cyan)}"
  print "Option> ".color(:blue)
  action = STDIN.gets.chomp![0,1].downcase
  clear

  if (action == "y") then
    if Dir.exist?(new_name)
      puts "x Folder already exists\n".color(:green)
    else
      FileUtils.mv("#{Dir.pwd}/#{folder_name}", "#{Dir.pwd}/#{new_name}")
      print "^ ".color(:green)
    end 
  else
    puts "x Skipped\n".color(:green)
  end
end
