#!/usr/bin/env ruby
require 'json'


def unicodeSymbol(unicodeNumber)
  return ""
  return %x[echo -ne "\\uE#{unicodeNumber}"]
end

class String
  def fg(i)
    return "\\f#{i}#{self}\\fr"
  end
  def bg(i)
    return "\\b#{i}#{self}\\br"
  end
end

def foo(x)
  a = %x[foo-wm-c /tmp/foo-wm.socket \'#{x}']
  if (a.chomp! == "Foo") then
    return {
      :layout => "?",
      :children => [],
      :node => "?"
    }
  else
    JSON.parse(a)
  end
end


def capFirst(a)
  return a.slice(0,1).capitalize + a.slice(1..-1)
end

count = 0
loop do
  # Battery
  batteryStatus = `battery status`.chomp!
  f = 3
  f = 4 if batteryStatus == "Charging"
  batteryStatus = " #{batteryStatus} ".fg(1).bg(2)
  batteryValue = " #{`battery percentage`.chomp!} ".fg(f)
  battery = "#{batteryStatus}#{batteryValue}"

  # Network
  networkLabel = " Network ".fg(1).bg(2)
  networkValue = " #{%x[netcfg current].chomp!} ".fg(5)
  network = "#{networkLabel}#{networkValue}"

  #Volume
  volumeLabel = " Volume ".fg(1).bg(2)
  volumeValue = " #{%x[amixer get Master | grep -woE '([0-9]+)\%' | head -1].chomp!} ".fg(6)
  volume = "#{volumeLabel}#{volumeValue}"


  time = Time.now.to_s.gsub!(/:\d{2}\s.+/, '').gsub!(/(\d{2}:\d{2})/, "\\f3| \\f6\\1")
  time = "\\fr\\br #{time}\\br\\fr"


  m = JSON %x[foo-wm-c "/tmp/foo-wm.socket" "get marks"]
  marks = m["marks"].join(" // \\f4".fg(4))

  marks = "\\f5 #{marks} \\br\\fr"


  #s = "\\u8#{wifi} #{battery} #{volume}\\c#{marks}\\r#{time} #{subway} #{weather}l"
  f = %x[foo-wm-c /tmp/foo-wm.socket 'get focus'].chomp!
  container = "Foo Window Manger"
  if (f == "Foo") then
    right = "Foo Window Manager"
  else
    c = JSON.parse %x[foo-focus-child-json]

    begin
      d = JSON.parse %x[foo-focus-parent-json]
    rescue
      d = {
        "layout" => "?",
        "children" => "?"
      }
    end

    layout = capFirst(d["layout"].to_s.downcase)
    children = d["children"].size.to_s

    maxWidth = 50
    right = "#{layout.fg(4)}[#{children.fg(7)}]" +  " / ".fg(3)
    center = ""
    #right = "#{client}"
    begin
      stack = JSON.parse(%x[foo-focus-parent-json])["children"]
    rescue
      stack = []
    end
    stack.each_with_index do |c, i|
      if c["type"] == "client" then
        name = %x[xptr-to-title #{c["id"]}].chomp!
      else
        name = "#{c["layout"][0].upcase}-Set [#{c["children"].size}]"
      end
      foc  = foo("get focus")["node"]
      if (c["node"] == foc) then
        name = name[0..16].fg(6)
        name = name + " , ".fg(3) unless c == stack.last
      elsif ((i != 0 && foc == stack[i - 1]["node"]) || (stack[i] != stack.last && foc == stack[i + 1]["node"])) then
        name = name[0..8].fg(1) 
        name = name + " , ".fg(3) unless c == stack.last
      else
        name = ".".fg(1)
      end

      right = right + name 
    end
    right = "#{right}"

  end
  zoom = %x[foo-zoom-level].chomp!
  center = "Z".fg(5) + " = " + "#{zoom.to_s.fg(3)}"
  center = "#{center} #{marks}"


  s = "#{battery}#{network}#{volume}#{time}\\c#{center}\\r#{right}"


  STDOUT.puts s
  STDOUT.flush

  count = count + 1
  if (count > 1) then
    %x[inotifywait -t 20 /tmp/bar-refresh]
  end
end
