#!/usr/bin/env ruby
require 'json'

def unicodeSymbol(unicodeNumber)
  return ""
  return %x[echo -ne "\\uE#{unicodeNumber}"]
end

class String
  def fg(i)
    return "\\f#{i}#{self}\\fr"
  end
  def bg(i)
    return "\\b#{i}#{self}\\br"
  end
end

def capFirst(a)
  return a.slice(0,1).capitalize + a.slice(1..-1)
end

count = 0
loop do
  # Battery
  batteryStatus = `battery status`.chomp!
  f = 3
  f = 4 if batteryStatus == "Charging"
  batteryStatus = " #{batteryStatus} ".fg(1).bg(2)
  batteryValue = " #{`battery percentage`.chomp!} ".fg(f)
  battery = "#{batteryStatus}#{batteryValue}"

  # Network
  networkLabel = " Network ".fg(1).bg(2)
  networkValue = " #{%x[netcfg current].chomp!} ".fg(5)
  network = "#{networkLabel}#{networkValue}"

  #Volume
  volumeLabel = " Volume ".fg(1).bg(2)
  volumeValue = " #{%x[amixer get Master | grep -woE '([0-9]+)\%' | head -1].chomp!} ".fg(6)
  volume = "#{volumeLabel}#{volumeValue}"


  time = Time.now.to_s.gsub!(/:\d{2}\s.+/, '').gsub!(/(\d{2}:\d{2})/, "\\f3| \\f6\\1")
  time = "\\fr\\br #{time}\\br\\fr"


  m = JSON %x[foo-wm-c "/tmp/foo-wm.socket" "get marks"]
  marks = m["marks"].join(" // \\f4".fg(4))

  marks = "\\f5 #{marks} \\br\\fr"


  #s = "\\u8#{wifi} #{battery} #{volume}\\c#{marks}\\r#{time} #{subway} #{weather}l"
  f = %x[foo-wm-c /tmp/foo-wm.socket 'get focus'].chomp!
  container = "Foo Window Manger"
  if (f == "Foo") then
    win = "Foo Window Manager"
  else

    c = JSON.parse %x[foo-focus-child-json]
    client = %x[xwininfo -id #{c["id"]} | head -n2 | tail -n1].match(/"(.+)"/)[1].to_s[0..30] 

    d = JSON.parse %x[foo-focus-parent-json]
    layout = capFirst(d["layout"].to_s.downcase)
    children = d["children"].size.to_s

    if ( (JSON %x[foo-wm-c /tmp/foo-wm.socket 'get focus'])["type"] == "container") then
      client = client.fg(1)
      layout = layout.fg(4)
      children = children.fg(6)
    else
      layout = layout.fg(1)
    end
    container = "#{layout} of ".fg(6) +  children.to_s.fg(7)
    client = client.fg(4)
    client = "#{container} / #{client}"

  end

  zoom = "Zoom ".fg(5) + "|" + " 3".fg(5) + " "
  
  center = "#{zoom} | #{marks}"
  right = "#{client}"

  s = "#{battery}#{network}#{volume}#{time}\\c#{center}\\r#{right}"


  STDOUT.puts s
  STDOUT.flush

  count = count + 1
  if (count > 1) then
    %x[inotifywait /tmp/bar-refresh]
  end
end
